package com.leetcode.www.middle.matrix;

/**
 * leetcode-36:有效的数独
 * 请你判断一个9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
     * 数字1-9在每一行只能出现一次。
     * 数字1-9在每一列只能出现一次。
     * 数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。（请参考示例图）
 * 注意：
     * 一个有效的数独（部分已被填充）不一定是可解的。
     * 只需要根据以上规则，验证已经填入的数字是否有效即可。
     * 空白格用'.'表示。
 */
public class ValidSudoku {


    /**
     * 使用哈希表去统计每一行，每一列和每一个小九宫格中，每个数字出现的次数，遍历数独一次，遍历过程中更新哈希表中的计数，并判断是否满足有效数独的条件即可
     * 具体做法:由于数独中的数字范围是1~9,可以使用数组代替哈希表的计数。创建二维数组rowArr和colArr来统计数独中每一行和每一列的数字出现的次数，使用一个三维数组
     *         subboxes来记录数独中每一个小九宫格中的每个数字出现的次数,对于boards[i][j]这个单元格在小九宫格中的行数和列数分别为i/3和j/3,遍历数独，在遍历过程
     *         中取维护这三个数组的计数
     * 复杂度分析
     *  时间复杂度:O(1).数组共有81个单元格，只需要对每个单元格遍历一次
     *  空间复杂度:O(1),由于数独的大小固定，哈希表的大小也就固定了
     *
     * @param boards
     * @return
     */
    public boolean solution(char[][] boards){

        int[][] rowArr = new int[9][9];
        int[][] colArr = new int[9][9];
        int[][][] subboxes = new int[3][3][9];

        for (int i = 0; i < 9; i++){
            for (int j = 0; j < 9; j++){
                if (boards[i][j] != '.'){
                    //数独的数字范围是1<=board<=9,数组的下标范围0<=_index<9,所以求数独数字对应的下标是需要减去一
                    int index = boards[i][j] - '0' - 1;
                    rowArr[i][index]++;
                    colArr[j][index]++;
                    //这个可以看作有i/3和j/3确定一个九宫格，然后可以把这个九宫格看作转换成了一个数组
                    subboxes[i/3][j/3][index]++;
                    if (rowArr[i][index] > 1 || colArr[i][index] > 1 || subboxes[i/3][j/3][index] > 1){
                        return false;
                    }
                }
            }
        }

        return true;
    }


    public static void main(String[] args) {

        ValidSudoku validSudoku = new ValidSudoku();
        char[][] boards = {
                {'5','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };

        boolean ans = validSudoku.solution(boards);
        System.out.println(ans);
    }

}
